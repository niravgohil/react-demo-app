{"version":3,"sources":["../src/Validator.js"],"names":["isEmpty","value","Validator","constructor","ctx","input","onError","user","t","field","key","as","alias","trim","transform","name","undefined","state","promise","addError","message","errors","push","states","isRequired","validateOnly","isEmail","options","isFloat","min","max","isInt","Number","isInteger","isLength","isURL","is","check","Promise","resolve","then","isValid","catch","err","fromGlobalId","type","fromGlobalIds","map","id","canEdit","userTypes","userType","includes","validate","done","length","filter","x","reduce","acc","some","all"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport isEmail from 'validator/lib/isEmail';\nimport isLength from 'validator/lib/isLength';\nimport isURL from 'validator/lib/isURL';\nimport textTrim from 'validator/lib/trim';\nimport { fromGlobalId as parseGlobalId } from './schema/utils';\nimport { type Context } from './Context';\n\nfunction isEmpty(value) {\n  return typeof value === 'undefined' || value === null;\n}\n\n/**\n * A set of validation helper methods that are indended to reduce\n * the amount of boilerpate code in GraphQL mutations. It's is based\n * on the popular \"validator\" library that you can find at:\n * https://github.com/chriso/validator.js\n */\n\nexport default class Validator {\n  user: any;\n  t: (input: string) => string;\n  input: { [key: string]: any };\n  onError: (error: string) => void;\n  errors = [];\n  states = [];\n\n  constructor(ctx: Context, input: any, onError: () => void) {\n    this.user = ctx.user;\n    this.t = ctx.t;\n    this.input = input;\n    this.onError = onError;\n  }\n\n  /**\n   * Initialized a new state for the field.\n   */\n  field(\n    key: string,\n    {\n      as,\n      alias,\n      trim,\n      transform,\n    }: {\n      as: string,\n      alias: string,\n      trim: boolean,\n      transform: (value: any) => any,\n    } = {},\n  ) {\n    const name = alias || key;\n\n    let value = this.input[key];\n\n    if (value && trim) {\n      value = textTrim(value, trim === true ? undefined : trim);\n    }\n\n    if (transform) {\n      value = transform(value);\n    }\n\n    this.state = {\n      key,\n      as,\n      name,\n      value,\n      promise: undefined,\n      addError: message =>\n        this.errors.push({\n          key,\n          message:\n            message || this.t('The {{- name}} field is invalid', { name }),\n        }),\n    };\n    this.states.push(this.state);\n    return this;\n  }\n\n  isRequired(validateOnly, message) {\n    if (!validateOnly && !this.state.value) {\n      this.state.addError(\n        message ||\n          this.t('The {{- name}} field cannot be empty', {\n            name: this.t(this.state.name),\n          }),\n      );\n    }\n    return this;\n  }\n\n  isEmail(options, message) {\n    if (!isEmpty(this.state.value) && !isEmail(this.state.value, options)) {\n      this.state.addError(message || this.t('The email address is invalid'));\n    }\n    return this;\n  }\n\n  isFloat(options, message) {\n    if (\n      !isEmpty(this.state.value) &&\n      (typeof this.state.value !== 'number' ||\n        (options.min && this.state.value < options.min) ||\n        (options.max && this.state.value > options.max))\n    ) {\n      this.state.addError(\n        message ||\n          this.t('The {{- name}} must be a FLOAT between {{min}} and {{max}}', {\n            name: this.t(this.state.name),\n            ...options,\n          }),\n      );\n    }\n    return this;\n  }\n\n  isInt(options, message) {\n    if (\n      !isEmpty(this.state.value) &&\n      (typeof this.state.value !== 'number' ||\n        !Number.isInteger(this.state.value) ||\n        (options.min && this.state.value < options.min) ||\n        (options.max && this.state.value > options.max))\n    ) {\n      this.state.addError(\n        message ||\n          this.t('The {{- name}} must be a INT between {{min}} and {{max}}', {\n            name: this.t(this.state.name),\n            ...options,\n          }),\n      );\n    }\n    return this;\n  }\n\n  isLength(options, message) {\n    if (!isEmpty(this.state.value) && !isLength(this.state.value, options)) {\n      if (options && options.min && options.max) {\n        this.state.addError(\n          message ||\n            this.t(\n              'The {{- name}} field must be between {{min}} and {{max}} characters long',\n              { name: this.t(this.state.name), ...options },\n            ),\n        );\n      } else if (options && options.max) {\n        this.state.addError(\n          message ||\n            this.t(\n              'The {{- name}} field must be up to {{max}} characters long',\n              {\n                name: this.t(this.state.name),\n                ...options,\n              },\n            ),\n        );\n      } else {\n        this.state.addError(message);\n      }\n    }\n    return this;\n  }\n\n  isURL(options, message) {\n    if (!isEmpty(this.state.value) && !isURL(this.state.value, options)) {\n      this.state.addError(message);\n    }\n    return this;\n  }\n\n  is(check, message) {\n    this.state.promise = (\n      this.state.promise || Promise.resolve(this.state)\n    ).then(\n      state =>\n        isEmpty(state.value)\n          ? state\n          : Promise.resolve()\n              .then(() => check(state.value, message))\n              .then(isValid => {\n                if (!isValid) state.addError(message);\n                return state;\n              })\n              .catch(err => {\n                state.addError(err.message);\n                return Promise.resolve(state);\n              }),\n    );\n    return this;\n  }\n\n  fromGlobalId(type) {\n    if (!isEmpty(this.state.value)) {\n      this.state.value = parseGlobalId(this.state.value, type);\n    }\n    return this;\n  }\n\n  fromGlobalIds(type) {\n    if (!isEmpty(this.state.value)) {\n      this.state.value = this.state.value.map(id => parseGlobalId(id, type));\n    }\n    return this;\n  }\n\n  canEdit(userTypes: Array<'isAdmin' | 'isBroker'>) {\n    if (\n      !(\n        this.user &&\n        userTypes.map(userType => this.user[userType]).includes(true)\n      )\n    ) {\n      this.state.value = undefined;\n    }\n    return this;\n  }\n\n  validate() {\n    const done = states => {\n      if (this.errors.length && this.onError) {\n        this.onError(this.errors);\n      }\n\n      return states\n        .filter(x => typeof x.value !== 'undefined')\n        .reduce((acc, state) => {\n          acc[state.as || state.key] = state.value;\n          return acc;\n        }, {});\n    };\n\n    return this.states.some(x => x.promise)\n      ? Promise.all(this.states.map(x => x.promise || Promise.resolve(x))).then(\n          done,\n        )\n      : done(this.states);\n  }\n}\n"]}