{"version":3,"sources":["../src/app.js"],"names":["app","set","use","req","callback","origin","credentials","maxAge","get","res","type","send","schema","context","Context","db","graphiql","pretty","formatError","err","console","error","originalError","message","code","state","locations","path","next","headersSent","status"],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA,oD,8FAfA;;;;;qJAiBA,MAAMA,GAAG,GAAG,uBAAZ,CAEAA,GAAG,CAACC,GAAJ,CAAQ,aAAR,EAAuB,CAAvB;AAEAD,GAAG,CAACE,GAAJ;AACE,mBAAK,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACtBA,EAAAA,QAAQ,CAAC,IAAD,EAAO;AACbC,IAAAA,MAAM,EAAE,IADK;AAEbC,IAAAA,WAAW,EAAE,IAFA;AAGbC,IAAAA,MAAM,EAAE,KAAK,CAHA,EAAP,CAAR;;AAKD,CAND,CADF;;;AAUAP,GAAG,CAACE,GAAJ,CAAQ,2BAAR;;AAEA;AACAF,GAAG,CAACQ,GAAJ,CAAQ,QAAR,EAAkB,CAACL,GAAD,EAAMM,GAAN,KAAc;AAC9BA,EAAAA,GAAG,CAACC,IAAJ,CAAS,YAAT,EAAuBC,IAAvB,CAA4B,IAA5B;AACD,CAFD;;AAIAX,GAAG,CAACE,GAAJ;AACE,UADF;AAEE,6BAAeC,GAAG,KAAK;AACrBS,EAAAA,MAAM,EAANA,eADqB;AAErBC,EAAAA,OAAO,EAAE,IAAIC,gBAAJ,CAAYX,GAAZ,EAAiBY,YAAjB,CAFY;AAGrBC,EAAAA,QAAQ,EAAE,IAHW,EAGL;AAChBC,EAAAA,MAAM,EAAE,KAJa;AAKrBC,EAAAA,WAAW,EAAEC,GAAG,IAAI;AAClBC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,aAAJ,IAAqBH,GAAnC,EADkB,CACuB;AACzC,WAAO;AACLI,MAAAA,OAAO,EAAEJ,GAAG,CAACI,OADR;AAELC,MAAAA,IAAI,EAAEL,GAAG,CAACG,aAAJ,IAAqBH,GAAG,CAACG,aAAJ,CAAkBE,IAFxC;AAGLC,MAAAA,KAAK,EAAEN,GAAG,CAACG,aAAJ,IAAqBH,GAAG,CAACG,aAAJ,CAAkBG,KAHzC;AAILC,MAAAA,SAAS,EAAEP,GAAG,CAACO,SAJV;AAKLC,MAAAA,IAAI,EAAER,GAAG,CAACQ,IALL,EAAP;;AAOD,GAdoB,EAAL,CAAlB,CAFF;;;;AAoBA3B,GAAG,CAACE,GAAJ,CAAQ,CAACiB,GAAD,EAAMhB,GAAN,EAAWM,GAAX,EAAgBmB,IAAhB,KAAyB;AAC/BR,EAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd,EAD+B,CACX;;AAEpB,MAAIV,GAAG,CAACoB,WAAR,EAAqB;AACnBD,IAAAA,IAAI,CAACT,GAAD,CAAJ;AACA;AACD;;AAEDV,EAAAA,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAsBQ,GAAG,IAAIA,GAAG,CAACI,OAAZ,IAAwB,YAA7C;AACD,CATD,E;;AAWevB,G","sourcesContent":["/**\n * Copyright Â© 2016-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\n/* @flow */\n\nimport express from 'express';\nimport cors from 'cors';\nimport compression from 'compression';\nimport expressGraphQL from 'express-graphql';\nimport schema from './schema';\nimport { Context } from './Context';\nimport db from './db_';\n\nconst app = express();\n\napp.set('trust proxy', 1);\n\napp.use(\n  cors((req, callback) => {\n    callback(null, {\n      origin: true,\n      credentials: true,\n      maxAge: 60 * 5,\n    });\n  }),\n);\n\napp.use(compression());\n\n// Health check endpoint (see the load balancer settings)\napp.get('/check', (req, res) => {\n  res.type('text/plain').send('OK');\n});\n\napp.use(\n  '/graphql',\n  expressGraphQL(req => ({\n    schema,\n    context: new Context(req, db),\n    graphiql: true, // process.env.GCP_PROJECT !== '<name>',\n    pretty: false,\n    formatError: err => {\n      console.error(err.originalError || err); // eslint-disable-line no-console\n      return {\n        message: err.message,\n        code: err.originalError && err.originalError.code,\n        state: err.originalError && err.originalError.state,\n        locations: err.locations,\n        path: err.path,\n      };\n    },\n  })),\n);\n\napp.use((err, req, res, next) => {\n  console.error(err); // eslint-disable-line no-console\n\n  if (res.headersSent) {\n    next(err);\n    return;\n  }\n\n  res.status(500).send((err && err.message) || 'API error.');\n});\n\nexport default app;\n"]}