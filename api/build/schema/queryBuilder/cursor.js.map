{"version":3,"sources":["../../../src/schema/queryBuilder/cursor.js"],"names":["parseCursor","cursor","offset","JSON","parse","cursorToOffset","offsetToCursor","totalCount","cursorStr","stringify","connectionFromArray","arr","args","length","first","Error","after","currTotalCount","parseInt","total_count","startOffset","edges","map","node","index","firstEdge","lastEdge","pageInfo","startCursor","endCursor","hasPreviousPage","hasNextPage"],"mappings":";;AAEA;;AAEO,MAAMA,WAAW,GAAG;AACzBC,EAAAA;AADyB,KAEmB;AAC5C,MAAIA,MAAM,IAAI,IAAd,EAAoB;AAClB,WAAO;AACLC,MAAAA,MAAM,EAAE,CAAC,CADJ,EAAP;;AAGD;;AAED,SAAOC,IAAI,CAACC,KAAL,CAAW,oBAASH,MAAT,CAAX,CAAP;AACD,CAVM,C;;AAYA,MAAMI,cAAc,GAAIJ,MAAD,IAAoBD,WAAW,CAACC,MAAD,CAAX,CAAoBC,MAA/D,C;;AAEP,MAAMI,cAAc,GAAG,CAACJ,MAAD,EAAiBK,UAAjB,KAAwC;AAC7D,QAAMN,MAAM,GAAG,EAAEC,MAAF,EAAUK,UAAV,EAAf;AACA,QAAMC,SAAS,GAAGL,IAAI,CAACM,SAAL,CAAeR,MAAf,CAAlB;AACA,SAAO,kBAAOO,SAAP,CAAP;AACD,CAJD;;AAMO,MAAME,mBAAmB,GAAG;AACjCC,GADiC;AAEjCC,IAFiC;AAG9B;AACH,MAAID,GAAG,CAACE,MAAJ,GAAaD,IAAI,CAACE,KAAtB,EAA6B;AAC3B,UAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,QAAM,EAAEb,MAAF,EAAUK,UAAV,KAAyBP,WAAW,CAACY,IAAI,CAACI,KAAN,CAA1C;;AAEA,QAAMC,cAAc;AAClB,GAACV,UAAU,IAAI,IAAd;AACGA,EAAAA,UADH;AAEGI,EAAAA,GAAG,CAACE,MAAJ,IAAcK,QAAQ,CAACP,GAAG,CAAC,CAAD,CAAH,CAAOQ,WAAR,EAAqB,EAArB,CAF1B,KAEuD,CAHzD;;AAKA,QAAMC,WAAW,GAAGlB,MAAM,GAAG,CAA7B;;AAEA,QAAMmB,KAA6C,GAAGV,GAAG,CAACW,GAAJ;AACpD,GAACC,IAAD,EAAcC,KAAd,MAAiC;AAC/BvB,IAAAA,MAAM,EAAEK,cAAc,CAACc,WAAW,GAAGI,KAAf,EAAsBP,cAAtB,CADS;AAE/BM,IAAAA,IAF+B,EAAjC,CADoD,CAAtD;;;;AAOA,QAAME,SAAS,GAAGJ,KAAK,CAAC,CAAD,CAAvB;AACA,QAAMK,QAAQ,GAAGL,KAAK,CAACA,KAAK,CAACR,MAAN,GAAe,CAAhB,CAAtB;;AAEA,SAAO;AACLQ,IAAAA,KADK;AAELM,IAAAA,QAAQ,EAAE;AACRC,MAAAA,WAAW,EAAEH,SAAS,GAAGA,SAAS,CAACxB,MAAb,GAAsB,IADpC;AAER4B,MAAAA,SAAS,EAAEH,QAAQ,GAAGA,QAAQ,CAACzB,MAAZ,GAAqB,IAFhC;AAGR6B,MAAAA,eAAe,EAAE5B,MAAM,GAAG,CAAC,CAHnB;AAIR6B,MAAAA,WAAW,EAAEX,WAAW,GAAGT,GAAG,CAACE,MAAlB,GAA2BI,cAAc,GAAG,CAJjD,EAFL;;AAQLV,IAAAA,UAAU,EAAEU,cARP,EAAP;;AAUD,CArCM,C","sourcesContent":["/* @flow */\n\nimport { base64, unbase64 } from 'graphql-relay/lib/utils/base64';\n\nexport const parseCursor = (\n  cursor: ?string,\n): { offset: number, totalCount?: number } => {\n  if (cursor == null) {\n    return {\n      offset: -1,\n    };\n  }\n\n  return JSON.parse(unbase64(cursor));\n};\n\nexport const cursorToOffset = (cursor: string) => parseCursor(cursor).offset;\n\nconst offsetToCursor = (offset: number, totalCount: number) => {\n  const cursor = { offset, totalCount };\n  const cursorStr = JSON.stringify(cursor);\n  return base64(cursorStr);\n};\n\nexport const connectionFromArray = (\n  arr: Array<{ total_count?: number }>,\n  args: { first: number, after?: ?string },\n) => {\n  if (arr.length > args.first) {\n    throw new Error('Data array must be less or equal to first property');\n  }\n\n  const { offset, totalCount } = parseCursor(args.after);\n\n  const currTotalCount =\n    (totalCount != null\n      ? totalCount\n      : arr.length && parseInt(arr[0].total_count, 10)) || 0;\n\n  const startOffset = offset + 1;\n\n  const edges: Array<{ cursor: string, node: mixed }> = arr.map(\n    (node: mixed, index: number) => ({\n      cursor: offsetToCursor(startOffset + index, currTotalCount),\n      node,\n    }),\n  );\n\n  const firstEdge = edges[0];\n  const lastEdge = edges[edges.length - 1];\n\n  return {\n    edges,\n    pageInfo: {\n      startCursor: firstEdge ? firstEdge.cursor : null,\n      endCursor: lastEdge ? lastEdge.cursor : null,\n      hasPreviousPage: offset > -1,\n      hasNextPage: startOffset + arr.length < currTotalCount - 1,\n    },\n    totalCount: currTotalCount,\n  };\n};\n"]}