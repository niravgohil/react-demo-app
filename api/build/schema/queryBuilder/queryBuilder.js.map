{"version":3,"sources":["../../../src/schema/queryBuilder/queryBuilder.js"],"names":["queryBuilder","params","ctx","args","table","prepareTotalCount","prepareCountOnly","prepareLimit","cursorToOffset","relayCursorToOffset","defaultSortBy","stableSortBy","db","limit","first","offset","after","query","select","raw","from","filters","customFiltersKeys","Object","keys","filter","includes","forEach","key","value","customFilters","sortDirection","sortBy","customSortBy","sortingBuilder","toString","orderBy"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-disable no-nested-ternary */\nimport { cursorToOffset as relayCursorToOffset } from 'graphql-relay';\nimport { whereClauseBuilder } from './whereClauseBuilder.js';\nimport { sortingBuilder } from './sortingBuilder.js';\n\ntype Params = {|\n  ctx: { db: any },\n  args: Object,\n  table: string,\n  prepareTotalCount?: boolean,\n  prepareCountOnly?: boolean,\n  prepareLimit?: boolean,\n  cursorToOffset?: any,\n  query?: any,\n  sortBy?: Object,\n  defaultSortBy?: Function,\n  stableSortBy?: Function,\n  filters?: Object,\n|};\n\nexport default function queryBuilder(params: Params) {\n  const {\n    ctx,\n    args,\n    table,\n    prepareTotalCount = true,\n    prepareCountOnly = false,\n    prepareLimit = true,\n    cursorToOffset = relayCursorToOffset,\n    defaultSortBy,\n    stableSortBy,\n  } = params;\n  const { db } = params.ctx;\n\n  // TODO: move limit offset logic out of queryBuilder\n  const limit = typeof args.first === 'undefined' ? '10' : args.first;\n  const offset = args.after ? cursorToOffset(args.after) + 1 : 0;\n\n  const query =\n    params.query ||\n    db\n      .select(\n        prepareCountOnly\n          ? db.raw('count(*)::int as total_count')\n          : prepareTotalCount\n            ? [`${table}.*`, db.raw('count(*) OVER() AS total_count')]\n            : [`${table}.*`],\n      )\n      .from(table);\n\n  // Filters\n  if (args.filters) {\n    const customFiltersKeys = params.filters ? Object.keys(params.filters) : [];\n\n    Object.keys(args.filters)\n      .filter(filter => !customFiltersKeys.includes(filter))\n      .forEach(filter => {\n        whereClauseBuilder({\n          ctx,\n          query,\n          table,\n          key: filter,\n          value: args.filters[filter],\n        });\n      });\n\n    // Custom filters\n    if (params.filters) {\n      const customFilters = params.filters;\n      Object.keys(args.filters)\n        .filter(filter => customFiltersKeys.includes(filter))\n        .forEach(filter => {\n          customFilters[filter]({\n            value: args.filters[filter],\n            query,\n            db,\n          });\n        });\n    }\n  }\n\n  if (prepareCountOnly) {\n    query.first();\n    return { query, limit, offset };\n  }\n\n  // Sort and sort direction\n  const sortDirection = args.sortDirection\n    ? db.raw(`${args.sortDirection} NULLS LAST`)\n    : db.raw('ASC NULLS LAST');\n\n  if (args.sortBy) {\n    const customSortBy = params.sortBy;\n    // Custom sortBy logic\n    if (customSortBy && customSortBy[args.sortBy]) {\n      customSortBy[args.sortBy]({\n        query,\n        sortDirection,\n        sortingBuilder,\n      });\n    } else {\n      sortingBuilder({\n        query,\n        table,\n        sortBy: args.sortBy,\n        sortDirection: sortDirection.toString(),\n      });\n    }\n  } else if (defaultSortBy) {\n    defaultSortBy({ query });\n  } else {\n    query.orderBy(`${table}.created_at`, 'desc');\n  }\n\n  // stable sorting\n  if (stableSortBy) {\n    stableSortBy({ query });\n  } else {\n    query.orderBy(`${table}.id`, 'asc');\n  }\n\n  if (prepareLimit) {\n    query.limit(limit).offset(offset);\n  }\n\n  return { query, limit, offset };\n}\n"]}