{"version":3,"sources":["../../../src/schema/property/mutations.js"],"names":["upsertProperty","name","description","inputFields","property","type","GraphQLNonNull","PropertyInputType","outputFields","PropertyType","mutateAndGetPayload","input","ctx","upsertedProperty","properties","load","id","then","x","deleteProperty","propertyId","GraphQLID","deletedPropertyId","db","table","where","delete","returning"],"mappings":";;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,iC;;;AAGO,MAAMA,cAAc,GAAG,gDAA6B;AACzDC,EAAAA,IAAI,EAAE,gBADmD;AAEzDC,EAAAA,WAAW,EAAE,mBAF4C;AAGzDC,EAAAA,WAAW,EAAE;AACXC,IAAAA,QAAQ,EAAE,EAAEC,IAAI,EAAE,IAAIC,uBAAJ,CAAmBC,oCAAnB,CAAR,EADC,EAH4C;;AAMzDC,EAAAA,YAAY,EAAE;AACZJ,IAAAA,QAAQ,EAAE,EAAEC,IAAI,EAAEI,0BAAR,EADE,EAN2C;;AASzD,QAAMC,mBAAN,CAA0BC,KAA1B,EAAiCC,GAAjC,EAA+C;AAC7C,UAAMR,QAAQ,GAAG,MAAM,uBAASO,KAAK,CAACP,QAAf,EAAyBQ,GAAzB,CAAvB;;AAEA;AACA,UAAMC,gBAAgB,GAAG,MAAM;AAC7BT,IAAAA,QAD6B;AAE7B,QAF6B;AAG7BQ,IAAAA,GAH6B,CAA/B;;;AAMA,WAAOA,GAAG,CAACE,UAAJ;AACJC,IAAAA,IADI,CACCF,gBAAgB,CAACG,EADlB;AAEJC,IAAAA,IAFI,CAECC,CAAC,KAAK,EAAEd,QAAQ,EAAEc,CAAZ,EAAL,CAFF,CAAP;AAGD,GAtBwD,EAA7B,CAAvB,C;;;AAyBA,MAAMC,cAAc,GAAG,gDAA6B;AACzDlB,EAAAA,IAAI,EAAE,gBADmD;AAEzDE,EAAAA,WAAW,EAAE;AACXiB,IAAAA,UAAU,EAAE,EAAEf,IAAI,EAAE,IAAIC,uBAAJ,CAAmBe,kBAAnB,CAAR,EADD,EAF4C;;AAKzDb,EAAAA,YAAY,EAAE;AACZc,IAAAA,iBAAiB,EAAE,EAAEjB,IAAI,EAAEgB,kBAAR,EADP,EAL2C;;AAQzD,QAAMX,mBAAN,CAA0BC,KAA1B,EAAiCC,GAAjC,EAA+C;AAC7C,UAAMQ,UAAU,GAAG,yBAAaT,KAAK,CAACS,UAAnB,EAA+B,UAA/B,CAAnB;AACA,UAAM,CAACE,iBAAD,IAAsB,MAAMV,GAAG,CAACW,EAAJ;AAC/BC,IAAAA,KAD+B,CACzB,YADyB;AAE/BC,IAAAA,KAF+B,CAEzB,EAAET,EAAE,EAAEI,UAAN,EAFyB;AAG/BM,IAAAA,MAH+B;AAI/BC,IAAAA,SAJ+B,CAIrB,IAJqB,CAAlC;AAKA,WAAO;AACLL,MAAAA,iBAAiB;AACfA,MAAAA,iBAAiB,IAAI,IAArB;AACI,UADJ;AAEI,oCAAW,UAAX,EAAuBA,iBAAvB,CAJD,EAAP;;AAMD,GArBwD,EAA7B,CAAvB,C","sourcesContent":["/* @flow */\n\nimport { GraphQLNonNull, GraphQLID } from 'graphql';\nimport { mutationWithClientMutationId, toGlobalId } from 'graphql-relay';\n\nimport { PropertyType } from '../PropertyType';\nimport { PropertyInputType } from '../PropertyInputType';\nimport upsertPropertyTransaction from './upsertProperty';\nimport validate from './validate';\nimport { fromGlobalId } from '../utils';\nimport { type Context } from '../../Context';\n\nexport const upsertProperty = mutationWithClientMutationId({\n  name: 'UpsertProperty',\n  description: 'Upsert a property',\n  inputFields: {\n    property: { type: new GraphQLNonNull(PropertyInputType) },\n  },\n  outputFields: {\n    property: { type: PropertyType },\n  },\n  async mutateAndGetPayload(input, ctx: Context) {\n    const property = await validate(input.property, ctx);\n\n    // upsert Property\n    const upsertedProperty = await upsertPropertyTransaction(\n      property,\n      null,\n      ctx,\n    );\n\n    return ctx.properties\n      .load(upsertedProperty.id)\n      .then(x => ({ property: x }));\n  },\n});\n\nexport const deleteProperty = mutationWithClientMutationId({\n  name: 'DeleteProperty',\n  inputFields: {\n    propertyId: { type: new GraphQLNonNull(GraphQLID) },\n  },\n  outputFields: {\n    deletedPropertyId: { type: GraphQLID },\n  },\n  async mutateAndGetPayload(input, ctx: Context) {\n    const propertyId = fromGlobalId(input.propertyId, 'Property');\n    const [deletedPropertyId] = await ctx.db\n      .table('properties')\n      .where({ id: propertyId })\n      .delete()\n      .returning('id');\n    return {\n      deletedPropertyId:\n        deletedPropertyId == null\n          ? null\n          : toGlobalId('Property', deletedPropertyId),\n    };\n  },\n});\n"]}