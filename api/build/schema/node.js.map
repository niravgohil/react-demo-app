{"version":3,"sources":["../../src/schema/node.js"],"names":["nodeInterface","nodeField","nodesField","globalId","context","type","id","properties","load","then","Error","obj","PropertyType"],"mappings":";;;AAGA;;AAEA;;AAEA,8C,CANA;;AAQO,MAAM,EAAEA,aAAF,EAAiBC,SAAjB,EAA4BC,UAA5B,KAA2C;AACtD,CAACC,QAAD,EAAWC,OAAX,KAAgC;AAC9B,QAAM,EAAEC,IAAF,EAAQC,EAAR,KAAe,gCAAaH,QAAb,CAArB;AACA,UAAQE,IAAR;AACE,SAAK,UAAL;AACE,aAAOD,OAAO,CAACG,UAAR,CAAmBC,IAAnB,CAAwBF,EAAxB,EAA4BG,IAA5B,CAAiC,uBAAW,UAAX,CAAjC,CAAP;;AAEF;AACE,YAAM,IAAIC,KAAJ,CAAW,QAAOL,IAAK,uCAAvB,CAAN,CALJ;;AAOD,CAVqD;;AAYtDM,GAAG,IAAI;AACL,UAAQ,oBAAQA,GAAR,CAAR;AACE,SAAK,UAAL;AACE,aAAOC,0BAAP;AACF;AACE,aAAO,IAAP,CAJJ;;AAMD,CAnBqD,CAAjD,C","sourcesContent":["/* @flow */\n/* eslint-disable global-require */\n\nimport { nodeDefinitions, fromGlobalId } from 'graphql-relay';\n\nimport { assignType, getType } from './utils';\nimport { type Context } from '../Context';\nimport { PropertyType } from './PropertyType';\n\nexport const { nodeInterface, nodeField, nodesField } = nodeDefinitions(\n  (globalId, context: Context) => {\n    const { type, id } = fromGlobalId(globalId);\n    switch (type) {\n      case 'Property':\n        return context.properties.load(id).then(assignType('Property'));\n\n      default:\n        throw new Error(`Type ${type} is not implemented in node interface`);\n    }\n  },\n\n  obj => {\n    switch (getType(obj)) {\n      case 'Property':\n        return PropertyType;\n      default:\n        return null;\n    }\n  },\n);\n"]}