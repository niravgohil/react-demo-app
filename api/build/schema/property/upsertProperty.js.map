{"version":3,"sources":["../../../src/schema/property/upsertProperty.js"],"names":["upsertTransaction","payload","trx","id","property","data","table","insert","Object","keys","length","where","update","upsertProperty","ctx","db","upsertedProperty","transaction","t"],"mappings":";;;AAGA,eAAeA,iBAAf,CAAiCC,OAAjC,EAA+CC,GAA/C,EAAyD;AACvD,QAAM,EAAEC,EAAF,EAAM,GAAGC,QAAT,KAAsBH,OAA5B;;AAEA,MAAIE,EAAE,IAAI,IAAV,EAAgB;AACd,UAAME,IAAI,GAAG,MAAMH,GAAG,CAACI,KAAJ,CAAU,YAAV,EAAwBC,MAAxB,CAA+BH,QAA/B,EAAyC,CAAC,GAAD,CAAzC,CAAnB;AACA,WAAOC,IAAP;AACD,GAHD,MAGO,IAAIG,MAAM,CAACC,IAAP,CAAYR,OAAZ,EAAqBS,MAArB,KAAgC,CAApC,EAAuC;AAC5C,UAAML,IAAI,GAAG,MAAMH,GAAG;AACnBI,IAAAA,KADgB,CACV,YADU;AAEhBK,IAAAA,KAFgB,CAEV,EAAER,EAAF,EAFU;AAGhBS,IAAAA,MAHgB,CAGTX,OAHS,EAGA,CAAC,GAAD,CAHA,CAAnB;AAIA,WAAOI,IAAP;AACD;;AAED,SAAO,EAAP;AACD;;AAEc,eAAeQ,cAAf;AACbR,IADa;AAEbH,GAFa;AAGbY,GAHa;AAIb;AACA,QAAM,EAAEC,EAAF,KAASD,GAAf;AACA,MAAIE,gBAAJ;;AAEA,MAAId,GAAJ,EAAS;AACP,KAACc,gBAAD,IAAqB,MAAMhB,iBAAiB,CAACK,IAAD,EAAOH,GAAP,CAA5C;AACD,GAFD,MAEO;AACL,KAACc,gBAAD,IAAqB,MAAMD,EAAE,CAACE,WAAH,CAAe,OAAMC,CAAN;AACxClB,IAAAA,iBAAiB,CAACK,IAAD,EAAOa,CAAP,CADQ,CAA3B;;AAGD;;AAED,SAAOF,gBAAP;AACD","sourcesContent":["/* @flow */\nimport { type Context } from '../../Context';\n\nasync function upsertTransaction(payload: any, trx: any) {\n  const { id, ...property } = payload;\n\n  if (id == null) {\n    const data = await trx.table('properties').insert(property, ['*']);\n    return data;\n  } else if (Object.keys(payload).length !== 0) {\n    const data = await trx\n      .table('properties')\n      .where({ id })\n      .update(payload, ['*']);\n    return data;\n  }\n\n  return [];\n}\n\nexport default async function upsertProperty(\n  data: any,\n  trx: any,\n  ctx: Context,\n) {\n  const { db } = ctx;\n  let upsertedProperty;\n\n  if (trx) {\n    [upsertedProperty] = await upsertTransaction(data, trx);\n  } else {\n    [upsertedProperty] = await db.transaction(async t =>\n      upsertTransaction(data, t),\n    );\n  }\n\n  return upsertedProperty;\n}\n"]}