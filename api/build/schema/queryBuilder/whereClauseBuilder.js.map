{"version":3,"sources":["../../../src/schema/queryBuilder/whereClauseBuilder.js"],"names":["EQ","LIKE","ILIKE","IN","NIN","GTE","GT","LTE","LT","MODIFIERS","parseFilterKey","table","filterKey","filterValue","keys","split","modifier","idx","length","value","includes","field","test","columnAliases","Array","isArray","id","map","v","tables","slice","t","addQueryModifier","query","db","fieldArg","where","raw","replace","whereNull","subQ","orWhereIn","filter","whereIn","whereNotNull","whereNotIn","whereClauseBuilder","params","key","ctx","SKIP_NULL_MODIFIERS","reduceRight","queryFn","currTbl","index","tbls","prevTable","pluralCurrTbl","tableAliases","pluralPrevTable","pluralize","isSingular","subQuery","whereExists","sQ","whereRaw","select","crossTable","join","singular"],"mappings":"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","sourcesContent":["// @flow\n\nimport pluralize from 'pluralize';\nimport { fromGlobalId } from 'graphql-relay';\nimport { toSnakeCase } from './utils.js';\nimport { tableAliases, columnAliases } from './aliases.js';\n\ntype Params = {|\n  ctx: { db: any },\n  query: any,\n  table: string,\n  key: string,\n  value: string,\n|};\n\nconst EQ = 'eq';\nconst LIKE = 'like';\nconst ILIKE = 'ilike';\nconst IN = 'in';\nconst NIN = 'nin';\nconst GTE = 'gte';\nconst GT = 'gt';\nconst LTE = 'lte';\nconst LT = 'lt';\n\nconst MODIFIERS = [EQ, LIKE, ILIKE, IN, NIN, GTE, GT, LTE, LT];\n\nconst parseFilterKey = (table, filterKey, filterValue) => {\n  const keys = filterKey.split('_');\n  let modifier = null;\n  let idx = keys.length - 1;\n  let value = filterValue;\n\n  if (MODIFIERS.includes(keys[idx])) {\n    modifier = keys[idx];\n    idx -= 1;\n  }\n\n  const field = `${toSnakeCase(keys[idx])}`;\n\n  // Determine if field is ID field and convert from globalId to database ID\n  if (/id$/.test(field) || columnAliases[field]) {\n    if (value != null) {\n      if (!Array.isArray(value)) {\n        value = fromGlobalId(value).id;\n      } else {\n        value = value.map(v => fromGlobalId(v).id);\n      }\n    }\n  }\n\n  const tables = [table, ...keys.slice(0, idx)].map(t => toSnakeCase(t));\n\n  return {\n    tables,\n    modifier,\n    field,\n    value,\n  };\n};\n\nconst addQueryModifier = (query, db, modifier, table, fieldArg, value) => {\n  const field = `${table}.${fieldArg}`;\n\n  if (modifier == null) {\n    query.where(field, '=', value);\n  }\n\n  if (modifier === 'eq' && value != null) {\n    query.where(field, '=', value);\n  }\n\n  if (modifier === 'like' && value != null) {\n    query.where(field, 'LIKE', `%${value}%`);\n  }\n\n  if (modifier === 'ilike' && value != null) {\n    query.where(\n      field,\n      'ILIKE',\n      db.raw('f_unaccent(?)', `%${value.replace(/\\s+/g, '%')}%`),\n    );\n  }\n\n  if (modifier === 'in' && Array.isArray(value)) {\n    if (value.includes(null) && value.length === 1) {\n      query.whereNull(field, value);\n    } else if (value.includes(null)) {\n      query.where(subQ => {\n        subQ.whereNull(field).orWhereIn(field, value.filter(v => v !== null));\n      });\n    } else {\n      query.whereIn(field, value);\n    }\n  }\n\n  if (modifier === 'nin' && Array.isArray(value)) {\n    // query.whereNotIn(field, value);\n    if (value.includes(null) && value.length === 1) {\n      query.whereNotNull(field, value);\n    } else if (value.includes(null)) {\n      query.where(subQ => {\n        subQ\n          .whereNotNull(field)\n          .whereNotIn(field, value.filter(v => v !== null));\n      });\n    } else {\n      query.whereNotIn(field, value);\n    }\n  }\n\n  if (modifier === 'gte') {\n    query.where(field, '>=', value);\n  }\n\n  if (modifier === 'gt') {\n    query.where(field, '>', value);\n  }\n\n  if (modifier === 'lte') {\n    query.where(field, '<=', value);\n  }\n\n  if (modifier === 'lt') {\n    query.where(field, '<', value);\n  }\n};\n\nexport const whereClauseBuilder = (params: Params) => {\n  const { modifier, field, value, tables } = parseFilterKey(\n    params.table,\n    params.key,\n    params.value,\n  );\n\n  const { ctx, query } = params;\n\n  const SKIP_NULL_MODIFIERS = MODIFIERS;\n\n  if (value !== null || !SKIP_NULL_MODIFIERS.includes(modifier)) {\n    query.where(\n      tables.reduceRight(\n        (queryFn, currTbl, index, tbls) => {\n          if (index > 0) {\n            const prevTable = tbls[index - 1];\n            const pluralCurrTbl =\n              tableAliases[pluralize(currTbl)] || pluralize(currTbl);\n            const pluralPrevTable =\n              tableAliases[pluralize(prevTable)] || pluralize(prevTable);\n\n            if (pluralize.isSingular(currTbl)) {\n              return subQuery =>\n                subQuery.whereExists(sQ =>\n                  sQ\n                    .table(pluralCurrTbl)\n                    .where(queryFn)\n                    .whereRaw(\n                      `${pluralCurrTbl}.id = ${pluralPrevTable}.${columnAliases[\n                        currTbl\n                      ] || `${currTbl}_id`}`,\n                    )\n                    .select(),\n                );\n            }\n\n            const crossTable =\n              tableAliases[`${pluralPrevTable}_${pluralCurrTbl}`] ||\n              `${pluralPrevTable}_${pluralCurrTbl}`;\n\n            return subQuery =>\n              subQuery.whereExists(sQ =>\n                sQ\n                  .table(pluralCurrTbl)\n                  .where(queryFn)\n                  .join(\n                    `${crossTable}`,\n                    `${crossTable}.${pluralize.singular(pluralCurrTbl)}_id`,\n                    `${pluralCurrTbl}.id`,\n                  )\n                  .whereRaw(\n                    `${pluralPrevTable}.id = ${crossTable}.${columnAliases[\n                      pluralize.singular(pluralPrevTable)\n                    ] || `${pluralize.singular(pluralPrevTable)}_id`}`,\n                  )\n                  .select(),\n              );\n          }\n\n          return queryFn;\n        },\n        subQuery =>\n          addQueryModifier(\n            subQuery,\n            ctx.db,\n            modifier,\n            pluralize(tables[tables.length - 1]),\n            field,\n            value,\n          ),\n      ),\n    );\n  }\n};\n"]}