{"version":3,"sources":["../../src/schema/utils.js"],"names":["assignType","type","obj","__type","getType","undefined","mapTo","keys","keyFn","rows","group","Map","map","key","forEach","row","set","Array","from","values","fromGlobalId","globalId","expectedType","types","isArray","name","id","includes","Error","join","fromGlobalIds","globalIds","wrapTransaction","func","data","trx","ctx","db","transaction","t"],"mappings":";;;AAGA;AACA,kC,CAHA;;;;;AAQO,SAASA,UAAT,CAAoBC,IAApB,EAAkC;AACvC,SAAQC,GAAD,IAAc;AACnB;AACA,QAAIA,GAAJ,EAASA,GAAG,CAACC,MAAJ,GAAaF,IAAb;AACT,WAAOC,GAAP;AACD,GAJD;AAKD;;AAEM,SAASE,OAAT,CAAiBF,GAAjB,EAA2B;AAChC;AACA,SAAOA,GAAG,GAAGA,GAAG,CAACC,MAAP,GAAgBE,SAA1B;AACD;;AAEM,SAASC,KAAT;AACLC,IADK;AAELC,KAFK;AAGL;AACA,SAAQC,IAAD,IAAsB;AAC3B,UAAMC,KAAK,GAAG,IAAIC,GAAJ,CAAQJ,IAAI,CAACK,GAAL,CAASC,GAAG,IAAI,CAACA,GAAD,EAAM,IAAN,CAAhB,CAAR,CAAd;AACAJ,IAAAA,IAAI,CAACK,OAAL,CAAaC,GAAG,IAAIL,KAAK,CAACM,GAAN,CAAUR,KAAK,CAACO,GAAD,CAAf,EAAsBA,GAAtB,CAApB;AACA;AACA,WAAOE,KAAK,CAACC,IAAN,CAAWR,KAAK,CAACS,MAAN,EAAX,CAAP;AACD,GALD;AAMD;;AAEM,SAASC,YAAT;AACLC,QADK;AAELC,YAFK;AAGG;AACR,MAAIC,KAAK,GAAGN,KAAK,CAACO,OAAN,CAAcF,YAAd,IAA8BA,YAA9B,GAA6C,CAACA,YAAD,CAAzD;AACAC,EAAAA,KAAK,GAAGA,KAAK,CAACX,GAAN,CAAUX,IAAI,IAAK,OAAOA,IAAP,KAAgB,QAAhB,GAA2BA,IAAI,CAACwB,IAAhC,GAAuCxB,IAA1D,CAAR;AACA,QAAM,EAAEyB,EAAF,EAAMzB,IAAN,KAAe,gCAAMoB,QAAN,CAArB;;AAEA,MAAI,CAACE,KAAK,CAACI,QAAN,CAAe1B,IAAf,CAAL,EAA2B;AACzB,UAAM,IAAI2B,KAAJ;AACH,kCAA6BL,KAAK,CAACM,IAAN,CAAW,IAAX,CAAiB,cAAa5B,IAAK,IAD7D,CAAN;;AAGD;;AAED,SAAOyB,EAAP;AACD;;AAEM,SAASI,aAAT;AACLC,SADK;AAELT,YAFK;AAGU;AACf,SAAOS,SAAS,CAACnB,GAAV,CAAcS,QAAQ,IAAID,YAAY,CAACC,QAAD,EAAWC,YAAX,CAAtC,CAAP;AACD;;;;;;;;AAQM,MAAMU,eAAe,GAAIC,IAAD,IAAyB;AACtDC,IADsD;AAEtDC,GAFsD;AAGtDC,GAHsD;AAInD;AACH,MAAID,GAAJ,EAAS;AACP,WAAOF,IAAI,CAACC,IAAD,EAAOC,GAAP,EAAYC,GAAZ,CAAX;AACD;;AAED,SAAOA,GAAG,CAACC,EAAJ,CAAOC,WAAP,CAAmBC,CAAC,IAAIN,IAAI,CAACC,IAAD,EAAOK,CAAP,EAAUH,GAAV,CAA5B,CAAP;AACD,CAVM,C","sourcesContent":["/* @flow */\n/* eslint-disable import/prefer-default-export */\n\nimport { fromGlobalId as parse } from 'graphql-relay';\nimport { GraphQLObjectType } from 'graphql';\nimport { type Context } from '../Context';\n\ntype ExpectedType = string | Array<string | GraphQLObjectType>;\n\nexport function assignType(type: string) {\n  return (obj: any) => {\n    // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n    if (obj) obj.__type = type;\n    return obj;\n  };\n}\n\nexport function getType(obj: any) {\n  // eslint-disable-next-line no-underscore-dangle\n  return obj ? obj.__type : undefined;\n}\n\nexport function mapTo(\n  keys: Array<string | number>,\n  keyFn: any => string | number,\n) {\n  return (rows: Array<any>) => {\n    const group = new Map(keys.map(key => [key, null]));\n    rows.forEach(row => group.set(keyFn(row), row));\n    /* $FlowFixMe */\n    return Array.from(group.values());\n  };\n}\n\nexport function fromGlobalId(\n  globalId: string,\n  expectedType: ExpectedType,\n): string {\n  let types = Array.isArray(expectedType) ? expectedType : [expectedType];\n  types = types.map(type => (typeof type === 'object' ? type.name : type));\n  const { id, type } = parse(globalId);\n\n  if (!types.includes(type)) {\n    throw new Error(\n      `Expected input ID of type '${types.join(', ')}' but got '${type}'.`,\n    );\n  }\n\n  return id;\n}\n\nexport function fromGlobalIds(\n  globalIds: Array<string>,\n  expectedType: ExpectedType,\n): Array<string> {\n  return globalIds.map(globalId => fromGlobalId(globalId, expectedType));\n}\n\nexport type TransactionFn = (\n  data: Object,\n  trx: any,\n  ctx: Context,\n) => ?Promise<Object>;\n\nexport const wrapTransaction = (func: TransactionFn) => (\n  data: Object,\n  trx: any,\n  ctx: Context,\n) => {\n  if (trx) {\n    return func(data, trx, ctx);\n  }\n\n  return ctx.db.transaction(t => func(data, t, ctx));\n};\n"]}