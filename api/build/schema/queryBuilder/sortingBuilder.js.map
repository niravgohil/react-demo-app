{"version":3,"sources":["../../../src/schema/queryBuilder/sortingBuilder.js"],"names":["singular","pluralize","sortByBuilder","params","keys","sortBy","split","tables","table","slice","map","t","field","length","lastAlias","forEach","currTable","index","pluralCurrTable","tableAliases","prevTableColumn","columnAliases","currTableAlias","pipedIndex","query","joinRaw","orderByRaw","sortDirection","sortingBuilder","item"],"mappings":";;AAEA;AACA;AACA,uC;;AAEA,MAAM,EAAEA,QAAF,KAAeC,kBAArB;;;;;;;;;AASA;;;;;;;;;;;;AAYA,MAAMC,aAAa,GAAGC,MAAM,IAAI;AAC9B,QAAMC,IAAI,GAAGD,MAAM,CAACE,MAAP,CAAcC,KAAd,CAAoB,GAApB,CAAb;AACA,QAAMC,MAAM,GAAG;AACbJ,EAAAA,MAAM,CAACK,KADM;AAEb,KAAGJ,IAAI,CAACK,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,EAAkBC,GAAlB,CAAsBC,CAAC,IAAI,wBAAU,wBAAYA,CAAZ,CAAV,CAA3B,CAFU,CAAf;;AAIA,QAAMC,KAAK,GAAG,wBAAYR,IAAI,CAACA,IAAI,CAACS,MAAL,GAAc,CAAf,CAAhB,CAAd;;AAEA,MAAIC,SAAS,GAAGP,MAAM,CAAC,CAAD,CAAtB;;AAEAA,EAAAA,MAAM,CAACQ,OAAP,CAAe,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AACnC,QAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,YAAMC,eAAe,GAAGC,sBAAaH,SAAb,KAA2BA,SAAnD;AACA,YAAMI,eAAe;AACnBC,6BAAcrB,QAAQ,CAACgB,SAAD,CAAtB,KAAuC,GAAEhB,QAAQ,CAACgB,SAAD,CAAY,KAD/D;AAEA,YAAMM,cAAc,GAAI,aAAYnB,MAAM,CAACoB,UAAW,IAAGN,KAAM,IAA/D;AACAd,MAAAA,MAAM,CAACqB,KAAP,CAAaC,OAAb;AACG,mBAAYP,eAAgB,OAAMI,cAAe,EAAlD;AACG,aAAMR,SAAU,IAAGM,eAAgB,IAAGE,cAAe,KAF1D;;AAIAR,MAAAA,SAAS,GAAGQ,cAAZ;AACD;AACF,GAZD;;AAcAnB,EAAAA,MAAM,CAACqB,KAAP,CAAaE,UAAb,CAAyB,GAAEZ,SAAU,IAAGF,KAAM,IAAGT,MAAM,CAACwB,aAAc,EAAtE;AACD,CAzBD;;AA2BO,MAAMC,cAAc,GAAG,CAACzB,MAAD;AAC5BA,MAAM,CAACE,MAAP,CAAcC,KAAd,CAAoB,GAApB,EAAyBS,OAAzB,CAAiC,CAACc,IAAD,EAAOZ,KAAP;AAC/Bf,aAAa,CAAC;AACZsB,EAAAA,KAAK,EAAErB,MAAM,CAACqB,KADF;AAEZD,EAAAA,UAAU,EAAEN,KAFA;AAGZT,EAAAA,KAAK,EAAEL,MAAM,CAACK,KAHF;AAIZH,EAAAA,MAAM,EAAEwB,IAJI;AAKZF,EAAAA,aAAa,EAAExB,MAAM,CAACwB,aALV,EAAD,CADf,CADK,C","sourcesContent":["// @flow\n\nimport pluralize from 'pluralize';\nimport { toSnakeCase } from './utils.js';\nimport { tableAliases, columnAliases } from './aliases.js';\n\nconst { singular } = pluralize;\n\ntype Props = {|\n  query: any,\n  table: string,\n  sortBy: string,\n  sortDirection: string,\n|};\n\n/*\n * Sort values examples\n * values are splitted with pipe operator\n *\n * createdBy_firstName|createdBy_lastName\n * broker_firstName|broker_lastName\n * property_propertyType_name\n * stage_order_nr|stage_pipeline_id\n * property_numberOfRooms|property_numberOfBathrooms\n * property_livingSurface|property_landSurface\n */\n\nconst sortByBuilder = params => {\n  const keys = params.sortBy.split('_');\n  const tables = [\n    params.table,\n    ...keys.slice(0, -1).map(t => pluralize(toSnakeCase(t))),\n  ];\n  const field = toSnakeCase(keys[keys.length - 1]);\n\n  let lastAlias = tables[0];\n\n  tables.forEach((currTable, index) => {\n    if (index !== 0) {\n      const pluralCurrTable = tableAliases[currTable] || currTable;\n      const prevTableColumn =\n        columnAliases[singular(currTable)] || `${singular(currTable)}_id`;\n      const currTableAlias = `__sorting_${params.pipedIndex}_${index}__`;\n      params.query.joinRaw(\n        `LEFT JOIN ${pluralCurrTable} AS ${currTableAlias}` +\n          ` ON ${lastAlias}.${prevTableColumn}=${currTableAlias}.id`,\n      );\n      lastAlias = currTableAlias;\n    }\n  });\n\n  params.query.orderByRaw(`${lastAlias}.${field} ${params.sortDirection}`);\n};\n\nexport const sortingBuilder = (params: Props) =>\n  params.sortBy.split('|').forEach((item, index) =>\n    sortByBuilder({\n      query: params.query,\n      pipedIndex: index,\n      table: params.table,\n      sortBy: item,\n      sortDirection: params.sortDirection,\n    }),\n  );\n"]}